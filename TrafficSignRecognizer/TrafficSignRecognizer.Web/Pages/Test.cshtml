@page "/test"

<LMTLocal ref="_mainLocal">
    <style>
        .dropArea, #@_mainLocal.id img {
            display: block;
            width: 300px;
            height: 300px;
            border: 2px solid black;
        }

        table * {
            border: 2px solid black;
        }
    </style>
    <LMTInjector jsonpath="/json/api.json" ref="@apiInfo" type="Api">
        <LMTTry>
            <LMTDropArea class="dropArea" ondrop="@ImageDropHandler">

            </LMTDropArea>
        </LMTTry>
    </LMTInjector>

    <img src="@($"data:image/png;base64,{grayscaledImage?.Base64}")" />
    <img src="@($"data:image/png;base64,{filteredImage?.Base64}")" />

    @if (grayscaledImageMatrix != null)
    {
        <table>
            <tbody>
                @for (var i = 0; i <= currentRow; i++)
                {
                    <tr>
                        @for (var j = 0; j < grayscaledImageMatrix[0].Length; j++)
                        {
                            <td>
                                @grayscaledImageMatrix[i][j]
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    }

</LMTLocal>

@inject HttpClient httpClient;
@using Interfaces.Entities;
@using Entities.InjectTypes;

@functions{
    private netstandard2._0.BlazorUtilsComponents.LMTInjector<Api> apiInfo;
    private Base64Image grayscaledImage;
    private int[][] grayscaledImageMatrix;
    private MatrixToken matrixToken;
    private netstandard2._0.BlazorUtilsComponents.LMTLocal _mainLocal;
    private int currentRow = -1;
    private Base64Image filteredImage;

    private async void ImageDropHandler(LMTDropEventArgs e)
    {
        var base64Image = new Base64Image { Base64 = e.Base64String };

        //grayscale
        grayscaledImage = await httpClient.PostJsonAsync<Base64Image>($"{apiInfo.Get().TestUrl}/tograyscale", base64Image);

        //filter
        var filter = new int[][]{
            new []{ 1, 1, 1},
            new [] {0, 0, 0},
            new []{-1, -1, -1}
        };
        filteredImage = await httpClient.PostJsonAsync<Base64Image>($"{apiInfo.Get().TestUrl}/withfilter", new { img = base64Image, filter });

        matrixToken = await httpClient.PostJsonAsync<MatrixToken>($"{apiInfo.Get().TestUrl}/tomatrix", grayscaledImage);

        grayscaledImageMatrix = new int[matrixToken.RowCount][];

        for (var CurRow = 0; CurRow < matrixToken.RowCount; CurRow++)
        {
            grayscaledImageMatrix[CurRow] = (await httpClient.PostJsonAsync<MatrixToken.MatrixRow>($"{apiInfo.Get().TestUrl}/getmatrix", matrixToken)).Value;
            currentRow++;
            await Task.Delay(500);
            StateHasChanged();
        }

        Dev.Warn("Done!");
    }
}