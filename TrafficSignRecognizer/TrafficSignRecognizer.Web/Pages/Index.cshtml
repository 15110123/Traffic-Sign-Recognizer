@page "/"

<LMTLocal>
    <style>
        .HeaderBackground {
            display: table;
            height: 70vh;
            width: 100vw;
            background: url(/img/traffic.jpg);
            background-size: cover;
            background-repeat: no-repeat;
            background-position-x: center;
        }

            .HeaderBackground h1 {
                color: white;
                text-transform: uppercase;
                z-index: 25;
                position: absolute;
                font-weight: lighter;
                font-size: 70px;
                margin-top: -115px;
                user-select: none;
            }

                .HeaderBackground h1 label {
                    text-transform: uppercase;
                    vertical-align: text-top;
                    font-size: 30px;
                    user-select: none;
                }

            .HeaderBackground .TitleContainer {
                display: table-cell;
                vertical-align: middle;
            }
    </style>

    <div class="HeaderBackground" lmt-filter="#000,0.6">
        <div class="TitleContainer">
            <h1>Tra cứu<br />Biển báo giao thông<label>Beta</label></h1>
        </div>
    </div>

    <ImageDropArea ondrop="@ImageDropHandler" />

    <LMTInjector ref="apiInfo" jsonpath="/json/api.json">
        @foreach (var trafficSignInfo in trafficSignInfos)
        {
            <TrafficSignInfoBox trafficsign="@trafficSignInfo" />
        }
    </LMTInjector>
</LMTLocal>

@using Entities.InjectTypes;
@inject HttpClient httpClient;

@functions{
    private List<TrafficSignInfo> trafficSignInfos = new List<TrafficSignInfo>();
    private netstandard2._0.BlazorComponents.LMTInjector apiInfo;

    protected override async Task OnAfterRenderAsync()
    {
        LMTBehaviours();
    }

    private async void ImageDropHandler(object component, LMTDropEventArgs e)
    {
        try
        {
            var result = await httpClient.PostJsonAsync<TrafficSignInfo>($"{apiInfo.Get<Api>().Url}/get", new { base64 = e.Base64String });
            if (result == null) Dev.Warn("Result is null!");
            trafficSignInfos.Add(result);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Dev.Error(ex.Message);
        }
    }
}